
// Rem with pixel fallback
@mixin font-sizes($size, $height) {
	font-size: $size;
	font-size: ($size / $fontSize-base) * 1rem;
	line-height: $height;
}

@mixin font-size($size) {
	font-size: $size;
	font-size: ($size / $fontSize-base) * 1rem;
}

// Query Breakpoints
$breakpoints: (
	'320'		: ( only screen and (min-width: 310px) ),
	'480' 		: ( only screen and (min-width: 470px) ),
	'768'		: ( only screen and (min-width: 760px) ),
    '960'		: ( only screen and (min-width: 960px) ),
	'1020' 		: ( only screen and (min-width: 1020px) ),
	'1024' 		: ( only screen and (min-width: 1020px) ),
	'1280' 		: ( only screen and (min-width: 1270px) ),
	'1366' 		: ( only screen and (min-width: 1360px) ),
	'1600' 		: ( only screen and (min-width: 1590px) ),
	'1920' 		: ( only screen and (min-width: 1910px) )
);

@mixin bp($name) {
	@if map-has-key($breakpoints, $name) {
		@media #{inspect(map-get($breakpoints, $name))} {
			@content;
		}
	} @else {
		@warn "Couldn't find a breakpoint named `#{$name}`.";
	}
}

// SVG background images with PNG and retina fallback
$image-path: '../images' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';
@mixin background-image($name, $size:false) {
    background-image: url(#{$image-path}/#{$name}.svg);
    @if($size) {
        background-size: $size;
    }
    .no-svg & {
        background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

        @media 	only screen and (-moz-min-device-pixel-ratio: 1.3),
        		only screen and (-o-min-device-pixel-ratio: 2.6/2),
        		only screen and (-webkit-min-device-pixel-ratio: 1.3),
        		only screen and (min-device-pixel-ratio: 1.3),
        		only screen and (min-resolution: 1.3dppx) {
          			background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
        }
    }
}

// Opacity 
@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); // IE 8
}

// POSITION 
@mixin absolute($top: auto, $right: auto, $bottom: auto, $left: auto) {
	position: absolute;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

@mixin relative($top: auto, $right: auto, $bottom: auto, $left: auto) {
	position: relative;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

@mixin fixed($top: auto, $right: auto, $bottom: auto, $left: auto) {
	position: fixed;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

// Centering BLOCK-elements IE>9
@mixin center-block($width: null, $height: null) {
	position: absolute;
	top: 50%;
	left: 50%;

	@if not $width and not $height {
		transform: translate(-50%, -50%);
	} @else if $width and $height {
		width: $width;
		height: $height;
		margin: -($width / 2) #{0 0} -($height / 2);
	} @else if not $height {
		width: $width;
		margin-left: -($width / 2);
		transform: translateY(-50%);
	} @else {
		height: $height;
		margin-top: -($height / 2);
		transform: translateX(-50%);
	}
}

// Centering BLOCK-elements IE<10
@mixin center-block-flex {
  display: flex;
  justify-content: center;
  align-items: center;
}